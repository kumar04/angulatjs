What are the possible ways to bind component properties to an associated template?
export class TemplateForInputBoxDirective{
    @Input() Data:any;
    @Output() DataChange:EventEmitter<any> = new EventEmitter();
    get Value(){
        return this.Data;
    }
    set Value(tValue){
         //Check some things about the new value then...
         this.DataChange.emit(tValue);
    }
}
Then you can use it like:

<template-for-inputbox [(Data)]="SomeObject.Value"></template-for-inputbox>
Q.What kind of classes can you import (meta) in an angular module?
BrowserModule MODULE BASED
NgModel based component
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { BrowserModule } from '@angular/platform-browser';import { NgModule } from '@angular/core';import { FormsModule } from '@angular/forms';
import { HttpModule } from '@angular/http';
Q.What are template reference variables and how are they different from variables in classes?
If this DOM element is just a plain one the variable contains a reference to it. In that case you can access any property of that DOM element through this variable:

<input type="text" (change)="true" #variable>
{{ variable.value }}
Q.How do you define optional fields in a TypeScript class?
In your case, it might be more convenient to use an interface for User instead.

export interface User {
    id: number;
    name?: string; // interfaces allow fields to be optional
}
I use interfaces when I want to define the 'shape' of an object, classes when I need to add behavior (methods). If all you need is to 
move data around, I'd use an interface.

If you do need a class, then the syntax for creating instances of Users in mock-users.ts should be a bit different. Firstly, 
there's no "optional class fields" in TypeScript. Any field can be not set/'undefined', so it doesn't make sense mark a field optional. 
You can instantiate a class with the new keyword - the downside is that you need to write a constructor to set field values or assign 
the instance to a variable and set fields. But there's nothing wrong with using the new keyword, especially for test objects.
Q.Why are components not marked with @injectable annotation, but services need to be?
Injectors are also responsible for instantiating components like HeroesComponent. So why doesn't HeroesComponent have @Injectable()?

You can add it if you really want to. It isn't necessary because the HeroesComponent is already marked with @Component, and this 
decorator class (like @Directive and @Pipe, which you learn about later) is a subtype of @Injectable(). It is in fact @Injectable() 
decorators that identify a class as a target for instantiation by an injector.

Q.What’s the difference between for..in and for..of?
for in loops over enumerable property names of an object.
for of (new in ES6) does use an object-specific iterator and loop over the values generated by that.

Q.How does the event emitter work in Angular 2? Explain it with pseudo code.
Q.Why do we need provider aliases? And how do you create one?
inject multiple provider
import { Component } from '@angular/core';
import { WeatherApiService } from './weather-api.service';
import { AuthService } from './auth.service';

@Component({
  ...,
  providers: [WeatherApiService, AuthService]
})
export class AppComponent {

  constructor(public weatherApi: WeatherApiService,
              public auth: AuthService) {}

}
Q.What's the difference between a TypeScript class and an interface?
TYPESCRIPT = TYPE + JAVASCRIPT
Javascript is loose typing language: variables are declared without a type, a function can return one type in one case and another type 
in another, automatic type coercion. It gives developers more control over the code. BUT…On the flip side of the coin, it is dangerous
Q.What's the expression context in Angular 2? Explain it with an example.
Expressions in Angular2 are very similar to expressions in Angular in terms of the scope of what they allow.
JavaScript expressions that promote side effects are prohibited including
Assignment (= +=, -=)
Using the new keyword
Chaining expressions using a semicolon or comma
Increment (++) and decrement operators
Q.What are a few subclasses of @Injectable?
A marker metadata that marks a class as available to Injector for creation.
Q.What are HTML attributes and DOM properties; and how are they related?
@Inject() is a manual mechanism for letting Angular know that a parameter must be injected. It can be used like so:
@Injectable() lets Angular know that a class can be used with the dependency injector. @Injectable() is not strictly required if the 
class has other Angular decorators on it or does not have any dependencies. What is important is that any class that is going to be 
injected with Angular is decorated. However, best practice is to decorate injectables with @Injectable(), as it makes more sense to the 
reader.
Q.What is the NgForTrackBy directive?
The NgForOf directive instantiates a template once per item from an iterable. The context for each instantiated template inherits from 
the outer context with the given loop variable set to the current item from the iterable.
Q.How do you resolve a template URL relative to a Component class?
import { Component, OnInit } from '@angular/core';

@Component({
  selector   : 'contacts-header',
  templateUrl: 'header.component.html',
  styleUrls  : ['header.component.css']
})
export class HeaderComponent implements OnInit {
}
Q.How do you use a JavaScript (Non TypeScript) third party lib in an Angular 2 App?
When including 3rd party libraries, there are two parts... the javascript code you want to execute, and the definition files to give 
the IDE all it's strongly-typed goodness.

Obviously, the first must be present if the app is to function. The easiest way to get that is to include the 3rd party library with a
<script src="thirdLib.js"> tag in the html page that hosts your Angular 2 app. That will not get you definitions, so you will not have 
IDE goodness, but the app will function. (to stop the IDE from complaining that it doesn't know about variable 'thirdLib', add declare 
var thirdLib:any to your ts file. Because it is of type any the IDE will not offer code-completion for thirdLib, but it will also not 
throw IDE errors.)
Q.Can we create two Components with the same name in two different .ts files?
You can't have two root components with the same selector in your page, you also can't have two @Component() decorators on the same
class.
If your components have different selectors, just run bootstrap for each root component

@Component({
    selector: 'app',
    template: '<h1>AppComponent1</h1>'
})
export class AppComponent1 { }

@Component({
    selector: 'appTwo',
    template: '<h1>AppComponent2</h1>'
})
export class ppComponent2 { }

bootstrap(AppComponent1)
bootstrap(AppComponent2)
Q.What types of pipes are supported in Angular 2?
Most simple pipe

{{"Paul Shan" | lowercase}}
1
{{"Paul Shan" | lowercase}}
Output >> paul shan 
lowercase is a predefined pipe. In the given example, the string “Paul Shan” is passed as a value to the pipe lowercase, and the output
paul shan is returned.
Q.How would you intercept 404 errors in Angular 2?
You need to pass a second callback to the subscribe method. This callback will execute when there is an error.

function handleError(error) {
  console.log(error)
}

fetchData(){
  return this.http.get('https://jsonplaceholder.typicode.com/psts/6')
      .map(
          (res) => res.json()
      )
      .subscribe(
        (data) => console.log(data),
        (error) => handleError(error)
  );
}
Q.What's the difference between RouterModule.forChild and RouterModule.forRoot?
I strongly suggest reading this article:

Avoiding common confusions with modules in Angular
Module with providers
When you import a module you usually use a reference to the module class:

@NgModule({
    providers: [AService]
})
export class A {}

-----------------------------------

@NgModule({
    imports: [A]
})
export class B
In this way all providers registered on module A will be added to the root injector and available for the entire application.

But there is another way to register a module with providers like this:

@NgModule({
    providers: [AService]
})
class A {}

export const moduleWithProviders = {
    ngModule: A,
    providers: [AService]
};

----------------------

@NgModule({
    imports: [moduleWithProviders]
})
export class B
This has the same implications as the previous one.

You probably know that lazy loaded modules have their own injector. So suppose you want to register AService to be available for the entire application, but some BService to be available to only lazy loaded modules. You can refactor your module like this:

@NgModule({
Q.How do you create and show pop-up windows in Angular 2?

13
down vote
accepted
Check Angular Material Dialogue, here is the Plunker

import {Component} from '@angular/core';
import {MdDialog, MdDialogRef} from '@angular/material';


@Component({
  selector: 'dialog-result-example',
  templateUrl: './dialog-result-example.html',
})
export class DialogResultExample {
  selectedOption: string;

  constructor(public dialog: MdDialog) {}

  openDialog() {
    let dialogRef = this.dialog.open(DialogResultExampleDialog);
    dialogRef.afterClosed().subscribe(result => {
      this.selectedOption = result;
    });
  }
}


@Component({
  selector: 'dialog-result-example-dialog',
  templateUrl: './dialog-result-example-dialog.html',
})
export class DialogResultExampleDialog {
  constructor(public dialogRef: MdDialogRef<DialogResultExampleDialog>) {}
}
Can we import a module twice?
Can you re-export classes and modules?
How to make sure that single instance will be used in an entire application?
How can you connect to remotely deployed backed while in development?
What’s the difference between a promise and Observable?
What are different kinds of directives supported in Angular 2?
How do you reference the host of a component?
