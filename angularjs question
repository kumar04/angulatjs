Q.What are the possible ways to bind component properties to an associated template?
export class TemplateForInputBoxDirective{
    @Input() Data:any;
    @Output() DataChange:EventEmitter<any> = new EventEmitter();
    get Value(){
        return this.Data;
    }
    set Value(tValue){
         //Check some things about the new value then...
         this.DataChange.emit(tValue);
    }
}
Then you can use it like:

<template-for-inputbox [(Data)]="SomeObject.Value"></template-for-inputbox>
Q.What kind of classes can you import (meta) in an angular module?
BrowserModule MODULE BASED
NgModel based component
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { BrowserModule } from '@angular/platform-browser';import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { HttpModule } from '@angular/http';
Q.What are template reference variables and how are they different from variables in classes?
If this DOM element is just a plain one the variable contains a reference to it. In that case you can access any property of that DOM
element through this variable:

<input type="text" (change)="true" #variable>
{{ variable.value }}
Q.How do you define optional fields in a TypeScript class?
In your case, it might be more convenient to use an interface for User instead.

export interface User {
    id: number;
    name?: string; // interfaces allow fields to be optional
}
I use interfaces when I want to define the 'shape' of an object, classes when I need to add behavior (methods). If all you need is to 
move data around, I'd use an interface.

If you do need a class, then the syntax for creating instances of Users in mock-users.ts should be a bit different. Firstly, 
there's no "optional class fields" in TypeScript. Any field can be not set/'undefined', so it doesn't make sense mark a field optional. 
You can instantiate a class with the new keyword - the downside is that you need to write a constructor to set field values or assign 
the instance to a variable and set fields. But there's nothing wrong with using the new keyword, especially for test objects.
Q.Why are components not marked with @injectable annotation, but services need to be?
Injectors are also responsible for instantiating components like HeroesComponent. So why doesn't HeroesComponent have @Injectable()?

You can add it if you really want to. It isn't necessary because the HeroesComponent is already marked with @Component, and this 
decorator class (like @Directive and @Pipe, which you learn about later) is a subtype of @Injectable(). It is in fact @Injectable() 
decorators that identify a class as a target for instantiation by an injector.

Q.What’s the difference between for..in and for..of?
for in loops over enumerable property names of an object.
for of (new in ES6) does use an object-specific iterator and loop over the values generated by that.

Q.How does the event emitter work in Angular 2? Explain it with pseudo code.
Q.Why do we need provider aliases? And how do you create one?
inject multiple provider
import { Component } from '@angular/core';
import { WeatherApiService } from './weather-api.service';
import { AuthService } from './auth.service';

@Component({
  ...,
  providers: [WeatherApiService, AuthService]
})
export class AppComponent {

  constructor(public weatherApi: WeatherApiService,
              public auth: AuthService) {}

}
Q.What's the difference between a TypeScript class and an interface?
TYPESCRIPT = TYPE + JAVASCRIPT
Javascript is loose typing language: variables are declared without a type, a function can return one type in one case and another type 
in another, automatic type coercion. It gives developers more control over the code. BUT…On the flip side of the coin, it is dangerous
Q.What's the expression context in Angular 2? Explain it with an example.
Expressions in Angular2 are very similar to expressions in Angular in terms of the scope of what they allow.
JavaScript expressions that promote side effects are prohibited including
Assignment (= +=, -=)
Using the new keyword
Chaining expressions using a semicolon or comma
Increment (++) and decrement operators
Q.What are a few subclasses of @Injectable?
A marker metadata that marks a class as available to Injector for creation.
Q.What are HTML attributes and DOM properties; and how are they related?
@Inject() is a manual mechanism for letting Angular know that a parameter must be injected. It can be used like so:
@Inject():it is used for inject
@Injectable() lets Angular know that a class can be used with the dependency injector. @Injectable() is not strictly required if the 
class has other Angular decorators on it or does not have any dependencies. What is important is that any class that is going to be 
injected with Angular is decorated. However, best practice is to decorate injectables with @Injectable(), as it makes more sense to the 
reader.
@Injectable() :inject user as singleton component.(inject component with service)
Q.What is the NgForTrackBy directive?
The NgForOf directive instantiates a template once per item from an iterable. The context for each instantiated template inherits from 
the outer context with the given loop variable set to the current item from the iterable.
Q.How do you resolve a template URL relative to a Component class?
import { Component, OnInit } from '@angular/core';

@Component({
  selector   : 'contacts-header',
  templateUrl: 'header.component.html',
  styleUrls  : ['header.component.css']
})
export class HeaderComponent implements OnInit {
}
Q.How do you use a JavaScript (Non TypeScript) third party lib in an Angular 2 App?
When including 3rd party libraries, there are two parts... the javascript code you want to execute, and the definition files to give 
the IDE all it's strongly-typed goodness.

Obviously, the first must be present if the app is to function. The easiest way to get that is to include the 3rd party library with a
<script src="thirdLib.js"> tag in the html page that hosts your Angular 2 app. That will not get you definitions, so you will not have 
IDE goodness, but the app will function. (to stop the IDE from complaining that it doesn't know about variable 'thirdLib', add declare 
var thirdLib:any to your ts file. Because it is of type any the IDE will not offer code-completion for thirdLib, but it will also not 
throw IDE errors.)
Q.Can we create two Components with the same name in two different .ts files?
You can't have two root components with the same selector in your page, you also can't have two @Component() decorators on the same
class in ts file.
If your components have different selectors, just run bootstrap for each root component

@Component({
    selector: 'app',
    template: '<h1>AppComponent1</h1>'
})
export class AppComponent1 { }

@Component({
    selector: 'appTwo',
    template: '<h1>AppComponent2</h1>'
})
export class ppComponent2 { }

bootstrap(AppComponent1)
bootstrap(AppComponent2)
Q.What types of pipes are supported in Angular 2?
Most simple pipe

{{"Paul Shan" | lowercase}}
1
{{"Paul Shan" | lowercase}}
Output >> paul shan 
lowercase is a predefined pipe. In the given example, the string “Paul Shan” is passed as a value to the pipe lowercase, and the output
paul shan is returned.
Q.How would you intercept 404 errors in Angular 2?
You need to pass a second callback to the subscribe method. This callback will execute when there is an error.

function handleError(error) {
  console.log(error)
}

fetchData(){
  return this.http.get('https://jsonplaceholder.typicode.com/psts/6')
      .map(
          (res) => res.json()
      )
      .subscribe(
        (data) => console.log(data),
        (error) => handleError(error)
  );
}
Q.What's the difference between RouterModule.forChild and RouterModule.forRoot?
I strongly suggest reading this article:

Avoiding common confusions with modules in Angular
Module with providers
When you import a module you usually use a reference to the module class:

@NgModule({
    providers: [AService]
})
export class A {}

-----------------------------------

@NgModule({
    imports: [A]
})
export class B
In this way all providers registered on module A will be added to the root injector and available for the entire application.

But there is another way to register a module with providers like this:

@NgModule({
    providers: [AService]
})
class A {}

export const moduleWithProviders = {
    ngModule: A,
    providers: [AService]
};

----------------------

@NgModule({
    imports: [moduleWithProviders]
})
export class B
This has the same implications as the previous one.

You probably know that lazy loaded modules have their own injector. So suppose you want to register AService to be available for the entire application, but some BService to be available to only lazy loaded modules. You can refactor your module like this:

@NgModule({
Q.How do you create and show pop-up windows in Angular 2?

import {Component} from '@angular/core';
import {MdDialog, MdDialogRef} from '@angular/material';


@Component({
  selector: 'dialog-result-example',
  templateUrl: './dialog-result-example.html',
})
export class DialogResultExample {
  selectedOption: string;

  constructor(public dialog: MdDialog) {}

  openDialog() {
    let dialogRef = this.dialog.open(DialogResultExampleDialog);
    dialogRef.afterClosed().subscribe(result => {
      this.selectedOption = result;
    });
  }
}


@Component({
  selector: 'dialog-result-example-dialog',
  templateUrl: './dialog-result-example-dialog.html',
})
export class DialogResultExampleDialog {
  constructor(public dialogRef: MdDialogRef<DialogResultExampleDialog>) {}
}
Q.Can we import a module twice?
Ans:
No problem! We can import the same module twice but Angular does not like modules with circular references.
Q.what is the lazy loading in Angular js?
Ans:
Lazy loading is the practice of loading expensive resources on-demand. This can greatly reduce the initial startup time for single 
page web applications. Instead of downloading all the application code and resources before the app starts, they are fetched 
just-in-time, as needed.

General purpose lazy loading 
UI-Router provides basic lazy loading capabilities using the lazyLoad property on a state definition. Before the state is entered, its lazyLoad function is invoked. The router waits until the promise returned by the function succeeds. After the successful promise has resolved, the state is entered as usual.

var mystate = {
  name: 'messages',
  url: '/messages',
  component: messages,
  lazyLoad: function() {
    return System.import('moment');
  }
}
Q.Can you re-export classes and modules?
Ans:exports: [CommonModule, ApplicationModule]
Q.How to make sure that single instance will be used in an entire application?
Everything injected using Angular 2’s DI is already a Singleton
class Service {}

@Component({})
class ChildCmp {
 constructor(svc: Service) {} // Same instance as in the parent
}

@Component({ providers : [Service], directives : [ChildCmp]] })
class MyComponent {
 constructor(svc: Service) {}
}

@Component({})
class AnotherComponent {
 constructor(svc: Service) {} // <<< FAIL! Has no provider for Service!
}

bootstrap(MyComponent); // Removed [Service], now it lives in the component
Q.How can you connect to remotely deployed backed while in development?
ng server automatically detect if changed in angular file
Q.What’s the difference between a promise and Observable?

A Promise handles a single event when an async operation completes or fails.
Note: There are Promise libraries out there that support cancellation, but ES6 Promise doesn't so far.
.run(function(getData) {
  var promise = getData()
    .then(function(string) {
      console.log(string)
    })
})
Observable
An Observable is like a Stream (in many languages) and allows to pass zero or more events where the callback is called for each event.
search(term: string): Observable<SearchItem[]> {
  let apiURL = `${this.apiRoot}?term=${term}&media=music&limit=20&callback=JSONP_CALLBACK`;
  return this.http.get(apiURL) 
      .map(res => { 
        return res.json().results.map(item => { 
          return new SearchItem( 
              item.trackName,
              item.artistName,
              item.trackViewUrl,
              item.artworkUrl30,
              item.artistId
          );
        });
      });
}
Q.What are different kinds of directives supported in Angular 2?
Components—directives with a template.
Structural directives—change the DOM layout by adding and removing DOM elements.
Attribute directives—change the appearance or behavior of an element, component, or another directive.
Example
import { Directive, ElementRef, Input } from '@angular/core';
@Directive({ selector: '[myHighlight]' })
export class HighlightDirective {
    constructor(el: ElementRef) {
       el.nativeElement.style.backgroundColor = 'yellow';
    }
}
Q.How do you reference the host of a component?
You get the host element reference using

class MyComponent {
  constructor(private elRef:ElementRef) {
    console.log(this.elRef.nativeElement);
  }
}
You can also subscribe to the focus event

class MyComponent {
  @HostBinding() tabindex = 0;
  @HostListener('focus', ['$event'])
  onFocus(event) {
    console.log(event);
  }
}
Q.How many way binding is available in angular js?
one way:(using double braces)
<p ng-bind="firstname"></p>
You can also use double braces {{ }} to display content from the model:
Example
<p>First name: {{firstname}}</p>

two way:
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">

<head>

<title>

AngularJs Two Binding Example

</title>

<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>

<script type="text/javascript">

var app = angular.module('angulartwobindapp', []);

app.controller('angulartwobindingCtrl', function ($scope) {

$scope.name = 'Welcome to Tutlane.com';

});

</script>

</head>

<body ng-app="angulartwobindapp">

<div ng-controller="angulartwobindingCtrl">

Enter Name : <input type="text" ng-model="name" style="width:250px" />

<p>

Entered Name:   {{ name }}

</p>

</div>

</body>

</html>

Q.what is routing in angular js?
The ngRoute module helps your application to become a Single Page Application
If you want to navigate to different pages in your application, but you also want the application to be a SPA (Single Page Application),
with no page reloading, you can use the ngRoute module.
The ngRoute module routes your application to different pages without reloading the entire application.

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular-route.js"></script>
<body ng-app="myApp">
<p><a href="#/!">Main</a></p>
<a href="#!london">City 1</a>
<a href="#!paris">City 2</a>
<p>Click on the links.</p>
<p>Note that each "view" has its own controller which each gives the "msg" variable a value.</p>
<div ng-view></div>
<script>
var app = angular.module("myApp", ["ngRoute"]);
app.config(function($routeProvider) {
    $routeProvider
    .when("/", {
        templateUrl : "main.htm",
    })
    .when("/london", {
        templateUrl : "london.htm",
        controller : "londonCtrl"
    })
    .when("/paris", {
        templateUrl : "paris.htm",
        controller : "parisCtrl"
    });
});
app.controller("londonCtrl", function ($scope) {
    $scope.msg = "I love London";
});
app.controller("parisCtrl", function ($scope) {
    $scope.msg = "I love Paris";
});

</script>

</body>
</html>

Q.if you change something in your angular file then what is the step to run your application after that your latest change codes are
reflect?
<executions>
            <execution>
                <id>exec-npm-install</id>
                <phase>generate-sources</phase>
                <configuration>     
<workingDirectory>${project.basedir}/src/main/ngapp</workingDirectory>
                    <executable>npm</executable>
                    <arguments>
                        <argument>install</argument>
                    </arguments>
                </configuration>
                <goals>
                    <goal>exec</goal>
                </goals>
            </execution>
            <execution>
                <id>exec-npm-ng-build</id>
                <phase>generate-sources</phase>
                <configuration>
                    <workingDirectory>${project.basedir}/src/main/ngapp</workingDirectory>
                    <executable>ng</executable>
                    <arguments>
                        <argument>build</argument>
                        <argument>--base-href=/ngfirst/ng/</argument>
                    </arguments>
                </configuration>
                <goals>
                    <goal>exec</goal>
                </goals>
            </execution>
        </executions>
inside the pom.xml ,write dependency of angular js
Q.what is ngInit vs ngOnInit vs constructor methods in angular js?
ngOnInit is a life cycle hook called by Angular2 to indicate that Angular is done creating the component.

We have to import OnInit in order to use like this (actually implementing OnInit is not mandatory but considered good practice):
// this is called by the JavaScript engine
  // rather than Angular
  constructor() {
    console.log('Constructor initialised');
  }
  
  import { Component, OnInit } from '@angular/core';

@Component({})
class ExampleComponent implements OnInit {
  constructor() {}

  // called on demand by Angular
  ngOnInit() {
    console.log('ngOnInit fired');
  }
}

const instance = new ExampleComponent();

// Angular calls this when necessary
instance.ngOnInit();
Q.tell me angular js flow?
easily create multiple angular modules in your project
each module can have it's own states, components, services, directives, modals, filters etc.
angular-flow components are inspired by web components so they group .js, .html, .scss files in one place.
easy create nested ui-router states in modules
use scripts for running dev server with live reload or for building for production
Q.how to test your angular js?
What is this?
An example of how you can test your AngularJS providers.

Relevant files
sampleProvider.js - A very simple configurable provider.
sampleProvider_spec.js - Some tests for the provider that should give you an idea of how you might test your real provider
How to run
npm install
bower install
karma start karma.conf.js
Links
Plunker that runs the tests on the browser.
Gist that runs tests with Karma.
 AngularJS Provider Test Example
Look at the README.
 bower.json
{
    "name": "sampleProvider Test Pattern",
    "version": "1.0.0",
    "dependencies": {
        "angular": "~1.2.0"
    },
    "devDependencies": {
        "angular-mocks": "~1.2.0",
        "angular-scenario": "~1.2.0"
    }
}
 karma.conf.js
module.exports = function(config) {
  'use strict';
  config.set({

    // base path, that will be used to resolve files and exclude
    basePath: '',

    frameworks: ['jasmine'],

    plugins: [
      'karma-jasmine',
      'karma-phantomjs-launcher'
    ],

    // list of files / patterns to load in the browser
    files: [
      'bower_components/angular/angular.js',
      'bower_components/angular-mocks/angular-mocks.js',
      'sampleProvider.js',
      'sampleProvider_spec.js'
    ],


    // list of files to exclude
    exclude: [],


    // test results reporter to use
    // possible values: 'dots', 'progress', 'junit'
    reporters: ['progress'],


    // web server port
    port: 9876,


    // cli runner port
    runnerPort: 9100,


    // enable / disable colors in the output (reporters and logs)
    colors: true,


    // level of logging
    // possible values: LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG
    logLevel: config.LOG_INFO,


    // enable / disable watching file and executing tests whenever any file changes
    autoWatch: true,


    // Start these browsers, currently available:
    // - Chrome
    // - ChromeCanary
    // - Firefox
    // - Opera
    // - Safari (only Mac)
    // - PhantomJS
    // - IE (only Windows)
    browsers: ['PhantomJS'],


    // If browser does not capture in given timeout [ms], kill it
    captureTimeout: 60000,


    // Continuous Integration mode
    // if true, it capture browsers, run tests and exit
    singleRun: true

  });
};

 package.json
{
  "name": "sampleProvider",
  "description": "Shows an example of how you can test your AngularJS providers.",
  "version": "1.0.0",
  "dependencies": {},
  "devDependencies": {
    "karma": "~0.10",
    "karma-jasmine": "~0.1",
    "karma-phantomjs-launcher": "~0.1.1"
  },
  "engines": {
    "node": ">=0.10.0"
  }
}
 sampleProvider.js
angular
  .module('sample', [])
  .provider('sample', function() {
    'use strict';

    var value = 'Default Value';

    this.setValue = function(val) {
      value = val;
    };

    this.$get = function() {

      var getValue = function() {
        return value;
      };

      var throwValue = function() {
        throw new Error(value);
      };

      return {
        getValue: getValue,
        throwValue: throwValue
      };

    };

  });
 sampleProvider_spec.js
describe('sampleProvider', function() {
  'use strict';

  // Provider instance
  var sample;

  // Instanciates the module
  beforeEach(function() {
    module('sample');
  });

  // Here we don't do any configuration to our provider
  describe('Default Configuration', function() {

    beforeEach(function() {
      inject(function(_sample_) {
        sample = _sample_;
      });
    });

    it('Should get the default value', function() {
      expect(sample.getValue()).toBe('Default Value');
    });

    it('Should throw the default value', function() {
      expect(function() {
        sample.throwValue();
      }).toThrow('Default Value');
    });
  
  });

  // Here we do some configuration
  describe('Configuration A', function() {

    // Configure the provider and instanciate it
    beforeEach(function() {
      module(function(sampleProvider) {
        sampleProvider.setValue('A');
      });

      inject(function(_sample_) {
        sample = _sample_;
      });
    });

    it('Should get the configured value', function() {
      expect(sample.getValue()).toBe('A');
    });

    it('Should throw the configured value', function() {
      expect(function() {
        sample.throwValue();
      }).toThrow('A');
    });

  });

});
Q.how to create your angular file ?is there any command for this requirement?list of file name
ng g component my-new-component
.html
.css
.ts
.spec.ts
it contains
import {MethodToStub} from "../src/MethodToStub";
import {instance, mock, when} from "../src/ts-mockito";
import {Bar} from "./utils/Bar";

describe("mocking", () => {
    describe("mocking abstract class", () => {
        let mockedFoo: SampleAbstractClass;
        let foo: SampleAbstractClass;

        it("does not execute getter or setter code (not throwing null pointer exception)", () => {
            // given
            // when
            mockedFoo = mock(SampleAbstractClass);
            foo = instance(mockedFoo);

            // then
        });

        it("does create own property descriptors on mock", () => {
            // given
            // when
            mockedFoo = mock(SampleAbstractClass);

            // then
            expect((mockedFoo.twoPlusTwo as any) instanceof MethodToStub).toBe(true);
        });

        it("does create own property descriptors on instance", () => {
            // given
            mockedFoo = mock(SampleAbstractClass);
            foo = instance(mockedFoo);

            // when
            when(mockedFoo.twoPlusTwo).thenReturn(42);

            // then
            expect(foo.twoPlusTwo).toBe(42);
        });

        it("does create inherited property descriptors on mock", () => {
            // given
            mockedFoo = mock(SampleAbstractClass);
            foo = instance(mockedFoo);

            // when
            // then
            expect((mockedFoo.sampleString as any) instanceof MethodToStub).toBe(true);
        });

        it("does create inherited property descriptors on instance", () => {
            // given
            mockedFoo = mock(SampleAbstractClass);
            foo = instance(mockedFoo);

            // when
            when(mockedFoo.sampleString).thenReturn("42");

            // then
            expect(foo.sampleString).toBe("42");
        });
    });

    describe("mocking generic class", () => {
        let mockedFoo: SampleGeneric<SampleInterface>;
        let foo: SampleGeneric<SampleInterface>;

        it("does not execute getter or setter code (not throwing null pointer exception)", () => {
            // given
            // when
            mockedFoo = mock(SampleGeneric);
            foo = instance(mockedFoo);

            // then
        });

        it("does create own property descriptors on mock", () => {
            // given
            // when
            mockedFoo = mock(SampleGeneric);

            // then
            expect((mockedFoo.twoPlusTwo as any) instanceof MethodToStub).toBe(true);
        });

        it("allows to mock method with generic return type value (with IDE completion)", () => {
            // given
            mockedFoo = mock(SampleGeneric);
            foo = instance(mockedFoo);
            const expectedResult = new SampleInterfaceImplementation();
            when(mockedFoo.getGenericTypedValue()).thenReturn(expectedResult);
            }
  }
